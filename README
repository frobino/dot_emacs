## PROJECT GOAL:

Create a cross-OS .emacs file which enables to use the same editor (Emacs) with similar functionalities to browse/edit code written in different languages (mainly VHDL, C, C++, C#, Haskell).

The main required functionalities are:
1. Autocomplete variables names/functions
2. Source code navigation:
   * jump from function instantation(s) och function definition and viceversa 
   * if possible, with SAME button combinations between the different languages (ex: M-, M-.)
   * specify which Backend for each mode (gtags, etags, or... and why)
3. Automatic indentation of code (t.ex. beautify)
4. Narrowing 
5. Flycheck and visualization of errors
6. Debug possiblility (ex: gdb, gcc integration)
   * compile
   * breakpoint

The look of the editor for all languages should be 2 columns, one for code, one for browsing with
7. sr-speedbar with code browser

## TODO NEXT:

     - understand why some of the autocomplete techniques give troubles
     - howto remove yas messages?
     - ctags better parser (make your own rules) to tag also constants, etc.
     - write a proper readme, describing steps for browsing c and vhdl code. 

## TODO list (X = done, ? = suspended, * = to be done):

     ### ALL CODE MODE (emacs_all_code_config.el):

     - [x] undo-tree:
       a MUST for all projects. Should be always active
       C-_ M-_ : do/undo
       C-x u   : open undo tree, navigate with arrows

     - [x] golden-ratio: automatically adjust window size
       NOTE: not added in .el file. If needed, install through pkg-mng and
       activate with M-x golden-ratio-mode

     ### C CODE MODE (emacs_c_code_config.el):

     - [x] sr_speedbar: speedbar in console (not in frame)
       Main shortcuts:
       M-x sr-speedbar-toggle
       SPC open/close children of a node
       RET to open

     - [x] EDE: project manager, used to expand semantics parser (i.e. the folders that the semantics parser use to autocomplete).
       Usually pre installed, no need for package install.
       EDE enables semantics to find sources & perform project level compilation.
       To use the EDE project management mode, we have to create a cedet-projects.el (use the ede-new-project function) in the root folder of the project (usually the one containing Makefile, src/, header/ folders) and edit it for our project.
       Then, we have to load cedet-projects.el file (containing "ede-cpp-root-project") so that we can expand semantics parsing folders (M-x load-file cedet-projects.el).
       NOTE: cedet-project.el does NOT need to be in a specific folder (e.g. .emacs.d/),
             but it can be in any folder, also the project folder!
             
     - [x] Semantics: auto completion #1 with active parser
       It is already included in all new version of emacs. 
       As default, it parses and autocomplete only the current file. To specify where headers and other files are, 
       we must load an ede project first which specifies (at least) the root folder. <--- !
       To autocomplete the classic functions (such as printf from stdio):
       WIN: semantic-add-system-include "e:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include"
       Look in semantic-dependency-system-include-path variable which path are included for the system libraries
       
     - [x] Company with different backends (semantic, clang, gtags,...): auto completion #2
       semantic : ok if config semantic
       clang: requires clang installed in PATH
       ...

     - [ ] ECB: IDE 
       NOTE: I tried EDE but it seems slow and not fully supported on all platforms, 
       e.g. troubles with cygwin, see ecb FAQ. Suspended for the moment.        

     - [x] company-c-header: auto completion for headers
       NOTES: about company-c-header
       Use writing #include < then tab_
       Add library path with the following:
       (add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")

     - [ ] check global-semantic-idle-summary-mode

     - [ ] **narrowing**: making only a text portion in current buffer visible.
     Narrowing is useful when you want to perform text editing on a small part of
     the buffer without affecting the others. For example, you want to delete
     all printf statements in current functions, using flush-lines command.
     Check also HideShow (see csharp)

     - [ ] indentation:

     - [x] yasnippet: function templates
       NOTE: use a shortcut such as for then tab

     - [ ] compilation support (to be improved):
       F5

     - [ ] **debugging** and gdb integration:

     - [x] ggtags: **source code navigation** through TAGS
       Run gtags in folder, M-, and M-.

     - [ ] helm-gtags: source code navigation through TAGS 

     - [ ] check https://sites.google.com/site/taubkfet/tutorials/settingupac11developmentenvironmentonlinuxwithclangandemacs for flymake and other modes

     - [ ] **flycheck** mode (install flycheck package, supports multiple languages)

     - [x] smartparens-config

     ### VHDL CODE MODE (emacs_vhdl_code_config.el):

     - [x] **autocomplete** is included in vhdl mode

     - [x] ctags support:
     Similar to gtags for **navigating C code**, we use ctags (a.k.a. etags or Exuberant Ctags)
     to create a TAGS file helping to browse our vhdl code. The .el file is not a library,
     but implements some useful functions. 
     Run the following command in the top folder containing your project: 
     ctags -e -R --languages=vhdl . 
     Browsing VHDL:
     M-. to find the entity declaration of an instantiated component (TOP DOWN).
     ctags-search (from the entity declaration) to find the place in code where it is istantiated (BOTTOM UP). Continue search trough ETAGS through M-,
     TODO: find a technique similar to occur (M-s o) instead of M-, continuously (or rgrep)

     ### C# CODE MODE

     - [x] evaluate csharp-mode

     * look at http://www.emacswiki.org/emacs/CSharpMode and consider:
       - [ ] Flycheck (Flymake is obsolete)
       - [ ] RFringe
       - [ ] HideShow (Isn't this already included in C mode?)
       - [x] Omnisharp

## Main sources (references):

     * http://tuhdo.github.io/c-ide.html: tutorial with explanations
     * https://github.com/tuhdo/emacs-c-ide-demo: elisp files from previous link
     * https://github.com/tuhdo/c-demo-project: C demo project
     * http://neonlabs.structum.net/pkgs/dotemacs
     * https://github.com/alexott/emacs-configs/tree/master/rc
